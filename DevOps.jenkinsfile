pipeline {
    agent any

    environment {
        GIT_URL = 'https://github.com/Akashsidhu129/DevOps.git'
        IMAGE_NAME = 'akashdeep/your-app-name' // Your Docker image name
        SONARQUBE_SERVER = 'http://your-sonarqube-server' // Your SonarQube server URL
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from Git
                git "${GIT_URL}"
            }
        }

        stage('Build') {
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t ${IMAGE_NAME}:latest ."
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Run automated tests, e.g., using JUnit or other testing frameworks
                    // Assuming you have a test command defined, e.g., `./run-tests.sh`
                    sh './run-tests.sh'
                }
            }
        }

        stage('Code Quality Analysis') {
            steps {
                script {
                    // Run SonarQube analysis
                    sh "docker run --rm -e SONAR_HOST_URL=${SONARQUBE_SERVER} -e SONAR_TOKEN=${SONAR_TOKEN} sonarsource/sonar-scanner-cli"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Deploy the application, e.g., using Docker Compose
                    sh "docker-compose up -d"
                }
            }
        }

        stage('Release') {
            steps {
                script {
                    // Promote the application to production
                    // Replace this with your specific release command
                    sh "echo 'Release step - customize as needed'"
                }
            }
        }

        stage('Monitoring and Alerting') {
            steps {
                script {
                    // Configure monitoring using Datadog, New Relic, or similar
                    // This can involve setting up an agent or using API calls
                    sh "echo 'Monitoring step - customize as needed'"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
    }
}
